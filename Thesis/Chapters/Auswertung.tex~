% Chapter Template

\chapter{Auswertung} % Main chapter title

\label{Chapter5} % Change X to a consecutive number; for referencing this chapter elsewhere, use \ref{ChapterX}

\lhead{Chapter 5. \emph{Auswertung}} % Change X to a consecutive number; this is for the header on each page - perhaps a shortened title
\section{Evaluation}
Sämtliche hier vorgestellte Regeln wurden mit speziell erstellen Logs in SEWOL erfolgreich getestet. Es wurden alle Regelverletzungen gefunden und keine \textit{false negatives} vermerkt.

Im Folgenden wird ein vereinfachtes Beispiel für den Analysevorgang vorgestellt und der genaue Ablauf der Auswertung besprochen. Gegeben seien ein Log und eine Regelspezifikation.

\begin{table}[h!]
\footnotesize
\begin{tabular}{|c|c|c|c|c|c|c|}
\hline
caseID&Task&User&Role&Timestamp&EventType&DataAttributes\\
\hline
0&Antrag empfangen&Mark&Kundenberater&2015-08-03T10:23:14&start&()\\
0&Antrag empfangen&Mark&Kundenberater&2015-08-03T11:47:23&complete&()\\
0&Antrag prüfen&Jenny&Sekretär&2015-08-04T07:02:36&start&()\\
0&Antrag prüfen&Jenny&Sekretär&2015-08-04T07:02:03&complete&()\\
\hline
\end{tabular}
\caption{Einfacher Log}
\end{table}

\begin{verbatim}
SET 'Manager' dominates 'Abteilungsleiter'
SET 'Abteilungsleiter' dominates 'Kundenberater'
SET 'Abteilungsleiter' dominates 'Sekräter'

DESC "Die Rolle, die Antrag prüfen ausführt, muss die Rolle,
die den Antrag annimmt, dominieren"
IF role R1 executed 'Antrag empfangen' AND 'Antrag empfangen' completed
AND (R1 dominates R2 OR R1 = R2)
  THEN R2 cannot execute 'Antrag prüfen'
\end{verbatim}
\begin{figure}[h]
\caption{Einfache Regelspezifikation}
\end{figure}

\newpage
\textbf{Phase 1: Einlesen des Logs}\\
Der Log wird vom LogTransformer in eine interne Wissensbasis übersetzt.
\begin{verbatim}
task_workflow(0,0),task_workflow(1,0),task_workflow(2,0),task_workflow(3,0),
task_name(0,'Antrag empfangen'),task_name(1,'Antrag empfangen'),
task_name(2,'Antrag prüfen'),task_name(3,'Antrag prüfen'),executed_user(0,'Mark'),
executed_user(0,'Mark'),executed_user(1,'Mark'),executed_user(2,'Jenny'),
executed_user(3,'Jenny'),executed_role(0,'Kundenberater'),
executed_role(1,'Kundenberater'),executed_role(2,'Sekretär'),
executed_role(3,'Seketär'), timestamp(0,TODO),timestamp(1,TODO),
timestamp(2,TODO),timestamp(3,TODO),eventtype(0, 'start'),eventtype(1, 'complete'),
eventtype(2, 'start'),eventtype(3, 'complete')
\end{verbatim}
\begin{figure}[h]
\caption{Beispiel Wissensbasis}
\end{figure}

\textbf{Phase 2: Einlesen der Regeln}\\
Aus der Regelspezifikation werden die gesetzten Fakten und Regeln übersetzt.

\begin{verbatim}
dominates('Manager','Abteilungsleiter'),
dominates('Abteilungsleiter', 'Kundenberater'),
dominates('Abteilungsleiter', 'Sekretär')

role_cannot_execute(R2, GENERATED1) :- 
    task_name(GENERATED1, 'Antrag prüfen'),
    role_executed(R1, GENERATED2),
    task_name(GENERATED2, 'Antrag empfangen'),
    eventtype(GENERATED2, 'complete'),
// Die folgenden zwei Zeilen sollen sicherstellen, 
// dass nur Aufgaben aus der selben Prozessinstanz betrachtet werden.
    task_workflow(GENERATED1, GENERATED3), 
    task_workflow(GENERATED2, GENERATED3),
    ( dominates(R1, R2) ; R1 = R2).
\end{verbatim}
\begin{figure}[h]
Die Regel wurde hier auch vereinfacht und enthält in der originalen Version weitere Verfahren zum ...
\caption{Beispiel Wissensbasis}
\end{figure}

\textbf{Phase 3: Erweiterung der Wissensbasis um implizite Informationen}\\
Gemäß der Transitivität von Rollenhierarchien wird die Wissensbasis um \\\texttt{dominates('Manager','Kundenberater')} und 
\texttt{dominates('Manager','Sekretär')} erweitert.

\textbf{Phase 4: Auswertung der Regel}\\
Der Körper der Regel \texttt{role\_cannot\_execute} wird ausgewertet, und es wird festgestellt, dass die Rolle 'Sekretär' und 'Kundenberater' keine Instanzen von 'Auftrag prüfen' ausführen darf. Da Jenny als Sekretärin diesen Auftrag aber begonnen und fertiggestellt hat, wird dies als Regelbruch vermerkt.

\textbf{Phase 5: Ausgabe}\\
Weil für die Aufgabe 'Antrag prüfen' kein Eventtyp angegeben wurde, wird der Regelverstoß zweimal registriert.

\begin{verbatim}
"Die Rolle, die Antrag prüfen ausführt, muss die Rolle,
die den Antrag annimmt, dominieren"
Illegal execution found:
User Jenny executed Task 2

"Die Rolle, die Antrag prüfen ausführt, muss die Rolle,
die den Antrag annimmt, dominieren"
Illegal execution found:
User Jenny executed Task 3
\end{verbatim}
\begin{figure}[h!]
\caption{Output nach der Analyse}
\end{figure}

\section{Diskussion}

Die entwickelte Definitionssprache stellt einige vordefinierte Prädikate zur Verfügung, die ausdrücken, ob die Ausführung einer Aktivität durch einen bestimmten Nutzer oder Rolle gewünscht oder unerwünscht ist. Diese Erwartungen sind daran gebunden, ob der Körper der Regel durch vorhergehende Aktivitäten erfüllt wurde. Ist dies der Fall, so tritt die Regel in Kraft. Die Erwartung wird anschließend gegen die Informationen aus den Logs verglichen. Wenn die tatsächliche Ausführung nicht der Spezifikation entspricht, wird dies verzeichnet.

Der Vorteil am implementierten Programm ist, dass es sich leicht erweitern lässt, um weitere Erwartungstypen zu definieren. Um zB ein Prädikat \texttt{expected execution time of TT is TP} zu implementieren, muss dieses Prädikat in der Grammatik Definition hinzugefügt werden, ein weiterer Regeltyp im Container zugelassen werden. Diese Regel wird dem Container hinzugefügt, sobald der Listener diesen Typ entdeckt und \texttt{main.pl} um eine Routine erweitert werden, die die tatsächliche Ausführungszeit mit der erwarteten Zeit vergleicht.

Für alle nicht vordefinierten Erwartungen kann man \texttt{illegal execution} verwenden, um zu beschreiben, welcher Verlauf einen Regelbruch darstellt. Somit ist das Programm nicht an die definierten Kopf-Prädikate gebunden und kann alle Einschränkungstypen abdecken.

Durch die eindeutige Notation von Aktivitäten bezüglich des Gültigkeitsbereich wird schon während dem parsen erkannt, welche Spanne eine Regel besitzt. Der Regel werden intern weitere Prädikate hinzugefügt, die den jeweiligen Kontext erzwingen. Da im Namen der Aktivität bei Instanzübergreifenden Regeln bereits ein Platz für die Instanzvariable vorhanden ist, kann man leicht definieren, ob sich einzelne Aktivitäten in einer Regel vielleicht doch in der selben Instanz befinden müssen. Ferner kann man bei Betrachtung der status.pl die genauen Instanz Ids ermitteln, um bei Bedarf eine eindeutige Instanz für die Untersuchung zu erzwingen. 

Ein weiterer Vorteil an dem entwickelten Programm ist die Flexibilität bezüglich der verwendeten Prädikate. Um Nutzer und Rollen zu gruppieren, stehen einige Vordefinierte Prädikate zur Verfügung. Mittels des Schlüsselwortes "DEF"\ lassen sich eigene Prädikate definieren, die entweder gesetzt werden oder denen man sogar eine Regel erstellen kann.



