% Chapter Template

\chapter{Auswertung} % Main chapter title

\label{Chapter5} % Change X to a consecutive number; for referencing this chapter elsewhere, use \ref{ChapterX}

\lhead{Chapter 5. \emph{Auswertung}} % Change X to a consecutive number; this is for the header on each page - perhaps a shortened title
\section{Evaluation}
Sämtliche hier vorgestellte Regeln wurden mit speziell erstellen Logs in SEWOL erfolgreich getestet. Es wurden alle Regelverletzungen gefunden und keine \textit{false negatives} vermerkt. TODO etwas besser erklären.

Im Folgenden wird ein stark vereinfachtes Beispiel für den Analysevorgang vorgestellt und der genaue Ablauf der Auswertung besprochen. Gegeben seien ein Log und eine Regelspezifikation.

\begin{table}[h!]
\footnotesize
\begin{tabular}{|c|c|c|c|c|c|c|}
\hline
caseID&Task&User&Role&Timestamp&EventType&DataAttributes\\
\hline
0&Antrag empfangen&Mark&Kundenberater&2015-08-03T10:23:14&start&()\\
0&Antrag empfangen&Mark&Kundenberater&2015-08-03T11:47:23&complete&()\\
0&Antrag prüfen&Jenny&Sekretär&2015-08-04T07:02:36&start&()\\
0&Antrag prüfen&Jenny&Sekretär&2015-08-04T07:02:03&complete&()\\
\hline
\end{tabular}
\caption{Einfacher Log}
\end{table}

\begin{verbatim}
SET 'Manager' dominates 'Abteilungsleiter'
SET 'Abteilungsleiter' dominates 'Kundenberater'
SET 'Abteilungsleiter' dominates 'Sekräter'

DESC "Die Rolle, die Antrag prüfen ausführt, muss die Rolle,
die den Antrag annimmt, dominieren"
IF role R1 executed 'Antrag empfangen' AND 'Antrag empfangen' completed
AND (R1 dominates R2 OR R1 = R2)
  THEN R2 cannot execute 'Antrag prüfen'
\end{verbatim}
\begin{figure}[h]
\caption{Einfache Regelspezifikation}
\end{figure}

\newpage
\textbf{Phase 1: Einlesen des Logs}\\
Der Log wird vom LogTransformer in eine interne Wissensbasis übersetzt.
\begin{verbatim}
task_workflow(0,0),task_workflow(1,0),task_workflow(2,0),task_workflow(3,0),
task_name(0,'Antrag empfangen'),task_name(1,'Antrag empfangen'),
task_name(2,'Antrag prüfen'),task_name(3,'Antrag prüfen'),executed_user(0,'Mark'),
executed_user(0,'Mark'),executed_user(1,'Mark'),executed_user(2,'Jenny'),
executed_user(3,'Jenny'),executed_role(0,'Kundenberater'),
executed_role(1,'Kundenberater'),executed_role(2,'Sekretär'),
executed_role(3,'Seketär'), timestamp(0,TODO),timestamp(1,TODO),
timestamp(2,TODO),timestamp(3,TODO),eventtype(0, 'start'),eventtype(1, 'complete'),
eventtype(2, 'start'),eventtype(3, 'complete')
\end{verbatim}
\begin{figure}[h]
\caption{Beispiel Wissensbasis}
\end{figure}

\textbf{Phase 2: Einlesen der Regeln}\\
Aus der Regelspezifikation werden die gesetzten Fakten und Regeln übersetzt.

\begin{verbatim}
dominates('Manager','Abteilungsleiter'),
dominates('Abteilungsleiter', 'Kundenberater'),
dominates('Abteilungsleiter', 'Sekretär')

role_cannot_execute(R2, GENERATED1) :- 
    task_name(GENERATED1, 'Antrag prüfen'),
    role_executed(R1, GENERATED2),
    task_name(GENERATED2, 'Antrag empfangen'),
    eventtype(GENERATED2, 'complete'),
// Die folgenden zwei Zeilen sollen sicherstellen, 
// dass nur Aufgaben aus der selben Prozessinstanz betrachtet werden.
    task_workflow(GENERATED1, GENERATED3), 
    task_workflow(GENERATED2, GENERATED3),
    ( dominates(R1, R2) ; R1 = R2).
\end{verbatim}
\begin{figure}[h]
Die Regel wurde hier auch vereinfacht und enthält in der originalen Version weitere Verfahren zum ...
\caption{Beispiel Wissensbasis}
\end{figure}

\textbf{Phase 3: Erweiterung der Wissensbasis um implizite Informationen}\\
Gemäß der Transitivität von Rollenhierarchien wird die Wissensbasis um \\\texttt{dominates('Manager','Kundenberater')} und 
\texttt{dominates('Manager','Sekretär')} erweitert.

\textbf{Phase 4: Auswertung der Regel}\\
Der Körper der Regel \texttt{role\_cannot\_execute} wird ausgewertet, und es wird festgestellt, dass die Rolle 'Sekretär' und 'Kundenberater' keine Instanzen von 'Auftrag prüfen' ausführen darf. Da Jenny als Sekretärin diesen Auftrag aber begonnen und fertiggestellt hat, wird dies als Regelbruch vermerkt.

\textbf{Phase 5: Ausgabe}\\
Weil für die Aufgabe 'Antrag prüfen' kein Eventtyp angegeben wurde, wird der Regelverstoß zweimal registriert.

\begin{verbatim}
"Die Rolle, die Antrag prüfen ausführt, muss die Rolle,
die den Antrag annimmt, dominieren"
Illegal execution found:
User Jenny executed Task 2

"Die Rolle, die Antrag prüfen ausführt, muss die Rolle,
die den Antrag annimmt, dominieren"
Illegal execution found:
User Jenny executed Task 3
\end{verbatim}
\begin{figure}[h!]
\caption{Output nach der Analyse}
\end{figure}

\section{Diskussion}


Wie kann man die restlichen Constraints implementieren\\
Compliance Checking:\\
Cannot do und Must execute vergleichen.\\
Optimierung??\\
Weitere Enforcement Prädikate definieren. Im Moment geht alls weitere durch illegal execution\\
Mehr critical\_task\_apirs anbieten



